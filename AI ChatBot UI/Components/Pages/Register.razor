@page "/register"
@using System.Text
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Text.Json
@using AI_ChatBot_UI.DTOs
@rendermode InteractiveServer


<link href="css/register.css" rel="stylesheet" />

<h3 class="form-title">Register</h3>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="text-red-500">@Error</div>
}

<EditForm Model="@RegisterModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-wrapper">
        <div class="form-group">
            <label>Username</label>
            <InputText @bind-Value="RegisterModel.Username" class="input" />
            <ValidationMessage For="@(() => RegisterModel.Username)" />
        </div>

        <div class="form-group">
            <label>Email</label>
            <InputText @bind-Value="RegisterModel.Email" class="input" />
            <ValidationMessage For="@(() => RegisterModel.Email)" />
        </div>

        <div class="form-group">
            <label>Password</label>
            <InputText @bind-Value="RegisterModel.Password" type="password" class="input" />
            <ValidationMessage For="@(() => RegisterModel.Password)" />
        </div>

        <button type="submit" class="btn">Register</button>
    </div>

    <div>
        <a href="/login" class="text-blue-500 hover:underline">Already have an account? Login</a>

    </div>
</EditForm>




@code {
    private RegisterDto RegisterModel = new();
    private string? Error;
    private int currentCount = 0;


    private async Task HandleRegister()
    {

        var content = new StringContent(JsonSerializer.Serialize(RegisterModel), Encoding.UTF8, "application/json");
        var response = await Http.PostAsync("https://localhost:7131/api/auth/register", content);


        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            Error = "Registration failed. Email may already be taken.";
        }
    }

   
}


